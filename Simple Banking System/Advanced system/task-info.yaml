type: edu
files:
- name: src/banking/Main.java
  visible: true
  text: |+
    package banking;

    import java.util.Scanner;

    import static banking.HelperClass.chooseOption;
    import static banking.HelperClass.printMenu;

    public class Main {
        static Scanner scanner = new Scanner(System.in);

        public static void main(String[] args) {
            printMenu();
            chooseOption();
        }
    }

  learner_created: false
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    public class Account {
        private int bin;
        private int account;
        private int checkDigit;

        public Account(int bin, int account, int checkDigit) {
            this.bin = bin;
            this.account = account;
            this.checkDigit = checkDigit;
        }

        public int getBin() {
            return bin;
        }

        public void setBin(int bin) {
            this.bin = bin;
        }

        public int getAccount() {
            return account;
        }

        public void setAccount(int account) {
            this.account = account;
        }

        public int getCheckDigit() {
            return checkDigit;
        }

        public void setCheckDigit(int checkDigit) {
            this.checkDigit = checkDigit;
        }

        @Override
        public String toString() {
            return bin + "" + account + "" +
                    checkDigit + "";
        }
    }
  learner_created: false
- name: src/banking/HelperClass.java
  visible: true
  text: |
    package banking;
    import java.util.ArrayList;
    import java.util.Random;

    import static banking.LuhnAlgorythm.luhnAlgorythm;

    public class HelperClass extends Main{

        private static int bin = 400000;
        static ArrayList<Account> accountList = new ArrayList<Account>();
        static ArrayList<Integer> pinCode = new ArrayList<Integer>();
        static boolean exit = true;


        public static void printMenu(){
            String[]menu={  "1. Create an account",
                            "2. Log into account",
                            "0. Exit"};

            for (String s : menu) {
                System.out.println(s);
            }
        }

        public static void chooseOption(){
            while(exit) {
                int option = scanner.nextInt();
                switch (option) {
                    case 1:
                        createAccount();
                        printMenu();
                        break;
                    case 2:
                        logIn();
                        printMenu();
                        break;
                    case 0:
                        exit = false;
                        break;
                    default:
                        System.out.println("You have entered an incorrect value, please choose from below!");
                        printMenu();
                        break;
                }
            }
        }

        public static void logIn() {
            System.out.println("\nEnter your card number: ");
            long cardNumber = scanner.nextLong();
            System.out.println("Enter your PIN: ");
            int pin = scanner.nextInt();
            loginCheck(cardNumber, pin);
        }

        public static void createAccount() {
            System.out.println("\nYour card has been created");
            System.out.println("Your card number:");
            int accountNumber = generateAccountNumber();
            //int checkSum =  generateCheckSum(bin, accountNumber);
            System.out.println(newCard(bin, accountNumber, generateCheckSum(bin, accountNumber)));
            //System.out.println(checkSum);
            System.out.println("Your card PIN:");
            System.out.println(newPin() + "\n");
        }
        public static void loginCheck(long cardNumber, int pinNumber) {
            boolean card = false;
            boolean pin = false;
            for (Account a : accountList) {
                if (convertToLong(a) == cardNumber) {
                    card = true;
                }
            }
            for (int i : pinCode) {
                if (i == pinNumber) {
                    pin = true;
                }
            }
            if (card && pin ) {
                System.out.println("\nYou have successfully logged in! \n");

                accountPage();
            } else {
                System.out.println("\nWrong card number or PIN! \n");
            }
        }
        public static Long convertToLong(Account a) {
            String stringToConvert = String.valueOf(a);
            return Long.parseLong(stringToConvert);
        }
        public static void accountPage() {
            String[] options = {    "1. Balance ",
                                    "2. Log out ",
                                    "0. Exit"
            };
            for (String s: options){
                System.out.println(s);
            }
            boolean cond = true;
            while (cond) {
                int option = scanner.nextInt();
                switch(option) {
                    case 1:
                        balance();
                        break;
                    case 2:
                        System.out.println("\nYou have successfully logged out! \n");
                        cond = false;
                        break;
                    case 0:
                        System.out.println("\nBye! \n");
                        exit = false;
                        break;
                    default:
                        System.out.println("Illegal input! Please choose an option below");
                }
            }
        }

        public static void balance() {
            System.out.println("\nBalance: 0");
        }


        public static int newPin(){
            Random random = new Random();
            int pin = Integer.parseInt(String.format("%04d", random.nextInt(9000) + 1000));
            pinCode.add(pin);
            return pin;
        }
        public static Account newCard(int bin, int account, int checkSum){
            Account a1 = new Account(bin, account, checkSum);
            accountList.add(a1);
            return a1;
        }

        public static int generateAccountNumber() {
            Random random = new Random();
            return Integer.parseInt(String.format("%09d", random.nextInt(900000000) + 99999999));
        }


        public static int generateCheckSum(int bin, int accountNumber) {
           return luhnAlgorythm(bin, accountNumber);
        }
    }
  learner_created: false
- name: src/banking/LuhnAlgorythm.java
  visible: true
  text: |+
    package banking;

    import java.util.Arrays;

    public class LuhnAlgorythm extends HelperClass{

        public static int luhnAlgorythm(int bin, int account) {
            String numberOne = Long.toString(bin);
            String numberTwo = Long.toString(account);
            String fullNumber = numberOne + numberTwo;
            long mergedNumber = Long.parseLong(fullNumber);
            return findCheckNumber(sumOfArray(subtractNine(doubleThirdIndex(convertToArray(mergedNumber)))));
        }
        public static int[] convertToArray(long number) {
            String temp = Long.toString(number);
            int[] numberArray = new int[temp.length()];
            for (int i = 0; i < temp.length(); i++) {
                numberArray[i] = temp.charAt(i) - '0';
            }
            return numberArray;
        }

        public static int[] doubleThirdIndex(int[] convertToArray) {
            int index = 1;
            for (int i = 0; i < convertToArray.length; i++) {
                if (index % 2 != 0) {
                    convertToArray[i] = convertToArray[i] * 2;
                    index++;
                } else {
                    index++;
                    continue;
                }
            }
            return convertToArray;
        }

        public static int[] subtractNine(int[] doubleThirdIndex) {
            for (int i = 0; i < doubleThirdIndex.length; i++){
                if (doubleThirdIndex[i] > 9) {
                    doubleThirdIndex[i] = doubleThirdIndex[i] - 9;
                }
            }
            return doubleThirdIndex;
        }

        public static int sumOfArray(int[] subtractNine) {
            int sum = 0;
            for (int i = 0; i < subtractNine.length; i++) {
                sum = sum + subtractNine[i];
            }
            return sum;
        }

        public static int findCheckNumber(int sumOfArray) {
            if (sumOfArray % 10 == 0) {
                return 0;
            } else {
                int checkSum = 10 - (sumOfArray % 10);
                return checkSum;
            }
        }
    }

  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {
            try {
                Files.deleteIfExists(Paths.get(tempDatabaseFileName));
                Files.deleteIfExists(Paths.get(databaseFileName));
            } catch (Exception ignored) {
            }

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        //@BeforeClass
        public static void createTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        //@AfterClass
        public static void deleteTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/BuildConnection.java
  visible: true
  text: |
    package banking;

    import org.sqlite.SQLiteDataSource;

    import java.sql.*;

    import static java.sql.DriverManager.getConnection;

    public class BuildConnection {

        private static Connection con;

        public static Connection establishConnection(String url, SQLiteDataSource dataSource) {
            try {
                con = getConnection(url);

            } catch (SQLException e) {
                System.out.println(e);
                return null;
            }
            return con;
        }

        public static void createTable(String url, SQLiteDataSource dataSource) {
            con = establishConnection(url, dataSource);
            try {
                PreparedStatement pst = con.prepareStatement("CREATE TABLE IF NOT EXISTS card(id INTEGER PRIMARY KEY, number VARCHAR, pin VARCHAR, balance INTEGER)");

                pst.executeUpdate();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }

        public static void insertDetails(Account accountNumber, int pin) {
            try {
                PreparedStatement pst = con.prepareStatement("INSERT INTO card(number, pin, balance) VALUES (?,?,?)");
                pst.setString(1, String.valueOf(accountNumber));
                pst.setString(2, String.valueOf(pin));
                pst.setInt(3, 0);

                int i = pst.executeUpdate();
            } catch (SQLException | NullPointerException e) {
                e.printStackTrace();
            }
        }

        public static boolean loginCheck(long cardNumber, int pin) {
            boolean check = false;
            try {
                PreparedStatement pst = con.prepareStatement("SELECT * FROM card WHERE number = ? and pin = ?");
                pst.setString(1, String.valueOf(cardNumber));
                pst.setString(2, String.valueOf(pin));
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    check = true;
                }
            } catch (SQLException e) {
                System.out.println(e);
            }
            return check;
        }



    }
  learner_created: true
- name: src/banking/AccountPage.java
  visible: true
  text: |
    package banking;

    import static banking.HelperClass.chooseOption;
    import static banking.HelperClass.printMenu;
    import static banking.Main.scanner;

    public class AccountPage {
        public static void accountPage() {
            String[] options = {    "1. Balance ",
                    "2. Add income",
                    "3. Do transfer",
                    "4. Close account",
                    "5. Log out",
                    "0. Exit"
            };
            for (String s: options){
                System.out.println(s);
            }
            while (true) {
                int option = scanner.nextInt();
                switch(option) {
                    case 1:
                        //Balance
                        balance();
                        accountPage();
                        break;
                    case 2:
                        //Add Income
                        System.out.println("Enter income: ");
                        int income = scanner.nextInt();

                        break;
                    case 3:
                        //Do transfer
                        System.out.println("Transfer");
                        System.out.println("Enter card number:");
                        long cardNumber = scanner.nextLong();
                        if (checkLuhn() && accountExists()) {
                            System.out.println("Enter how much money you want to transfer:");
                            int transferAmount = scanner.nextInt();
                            transferMoney();
                        } else if (!checkLuhn()){
                            System.out.println("Probably you made a mistake in the card number. Please try again!");
                            cardNumber = scanner.nextLong();
                        } else if (!accountExists()) {
                            System.out.println("Such a card does not exist.");
                        }
                        break;
                    case 4:
                        System.out.println("The account has been closed!");
                        break;
                    case 5:
                        System.out.println("\nYou have successfully logged out! \n");
                        printMenu();
                        chooseOption();
                        break;
                    case 0:
                        System.out.println("\nBye! \n");
                        System.exit(0);
                        break;
                    default:
                        System.out.println("Illegal input! Please choose an option below");
                }
            }
        }

        public static void balance() {
            System.out.println("\nBalance: 0\n");
        }

        public static boolean checkLuhn(){
            return Boolean.parseBoolean(null);
        }
        public static void transferMoney(){

        }
        public static boolean accountExists() {
            return Boolean.parseBoolean(null);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Sun, 27 Nov 2022 19:50:05 UTC"
record: -1
